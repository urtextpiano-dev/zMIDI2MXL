# Function Analysis: canCombineRestsWithBeamAwareness

## Metadata
- **File**: `src/timing/rest_optimizer.zig`
- **Lines**: 784-816 (33 lines)
- **Type**: function
- **Visibility**: private
- **Signature**: `fn canCombineRestsWithBeamAwareness(self: *RestOptimizer, rest1: Rest, rest2: Rest, time_sig: TimeSignature, beam_constraints: ?[]const BeamGroupConstraint) bool {`

## Function Content
```zig
    fn canCombineRestsWithBeamAwareness(self: *RestOptimizer, rest1: Rest, rest2: Rest, time_sig: TimeSignature, beam_constraints: ?[]const BeamGroupConstraint) bool {
        // First check basic combination rules
        if (!self.canCombineRests(rest1, rest2, time_sig)) {
            return false;
        }
        
        // Additional beam-aware checks
        if (beam_constraints != null) {
            const combined_start = rest1.start_time;
            const combined_end = rest2.start_time + rest2.duration;
            
            // Don't combine if it would span across beam group boundaries
            for (beam_constraints.?) |constraint| {
                // Check if combination would cross beam boundaries
                if (combined_start < constraint.start_time and combined_end > constraint.start_time) {
                    return false;
                }
                if (combined_start < constraint.end_time and combined_end > constraint.end_time) {
                    return false;
                }
                
                // Don't combine rests that are within different beam groups
                const rest1_in_beam = (rest1.start_time >= constraint.start_time and rest1.start_time < constraint.end_time);
                const rest2_in_beam = (rest2.start_time >= constraint.start_time and rest2.start_time < constraint.end_time);
                
                if (rest1_in_beam != rest2_in_beam) {
                    return false;
                }
            }
        }
        
        return true;
    }
```

## Analysis Template (To be completed by simplification agent)

### Current Implementation Analysis
- **Purpose**: [Function's role in MIDI-to-MXL conversion]
- **Algorithm**: [How the function works]
- **Complexity**: [Time/space complexity, cyclomatic complexity]
- **Pipeline Role**: [Where this fits in the conversion pipeline]

### Simplification Opportunity
- **Proposed Change**: [Specific simplification identified]
- **Rationale**: [Why this simplification improves the code]
- **Complexity Reduction**: [Measurable improvement metrics]

### Evidence Package
- **Functional Proof**: [Demonstration of equivalence]
- **Performance Data**: [Before/after benchmarks if applicable]
- **Test Results**: [Validation of correctness]
- **Risk Assessment**: [Potential issues and mitigations]

### Recommendation
- **Confidence Level**: [0-100% with justification]
- **Implementation Priority**: [High/Medium/Low with reasoning]
- **Prerequisites**: [Dependencies or requirements]
