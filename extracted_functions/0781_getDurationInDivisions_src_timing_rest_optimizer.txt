# Function Analysis: getDurationInDivisions

## Metadata
- **File**: `src/timing/rest_optimizer.zig`
- **Lines**: 84-97 (14 lines)
- **Type**: function
- **Visibility**: public
- **Signature**: `pub fn getDurationInDivisions(self: NoteType, divisions_per_quarter: u32) u32 {`

## Function Content
```zig
    pub fn getDurationInDivisions(self: NoteType, divisions_per_quarter: u32) u32 {
        return switch (self) {
            .breve => divisions_per_quarter * 8,
            .whole => divisions_per_quarter * 4,
            .half => divisions_per_quarter * 2,
            .quarter => divisions_per_quarter,
            .eighth => divisions_per_quarter / 2,
            .@"16th" => divisions_per_quarter / 4,
            .@"32nd" => divisions_per_quarter / 8,
            .@"64th" => divisions_per_quarter / 16,
            .@"128th" => divisions_per_quarter / 32,
            .@"256th" => divisions_per_quarter / 64,
        };
    }
```

## Analysis Template (To be completed by simplification agent)

### Current Implementation Analysis
- **Purpose**: [Function's role in MIDI-to-MXL conversion]
- **Algorithm**: [How the function works]
- **Complexity**: [Time/space complexity, cyclomatic complexity]
- **Pipeline Role**: [Where this fits in the conversion pipeline]

### Simplification Opportunity
- **Proposed Change**: [Specific simplification identified]
- **Rationale**: [Why this simplification improves the code]
- **Complexity Reduction**: [Measurable improvement metrics]

### Evidence Package
- **Functional Proof**: [Demonstration of equivalence]
- **Performance Data**: [Before/after benchmarks if applicable]
- **Test Results**: [Validation of correctness]
- **Risk Assessment**: [Potential issues and mitigations]

### Recommendation
- **Confidence Level**: [0-100% with justification]
- **Implementation Priority**: [High/Medium/Low with reasoning]
- **Prerequisites**: [Dependencies or requirements]
