# Function Analysis: calculateErrorVariance

## Metadata
- **File**: `src/timing/tuplet_detector.zig`
- **Lines**: 402-448 (47 lines)
- **Type**: function
- **Visibility**: private
- **Signature**: `fn calculateErrorVariance(notes: []const measure_detector.TimedNote, expected_spacing: f64) f64 {`

## Function Content
```zig
fn calculateErrorVariance(notes: []const measure_detector.TimedNote, expected_spacing: f64) f64 {
    if (notes.len < 2) return 0.0;
    
    // Stack allocation for typical tuplet sizes (up to 16 notes covers all common cases)
    var errors: [16]f64 = undefined;
    const error_count = notes.len - 1;
    
    // Bounds check for safety - if we have more than 16 intervals, use approximate calculation
    if (error_count > 16) {
        // For very large tuplets (rare), use simpler calculation without storing all errors
        var sum: f64 = 0.0;
        var sum_squares: f64 = 0.0;
        
        for (0..error_count) |i| {
            const actual_interval = @as(f64, @floatFromInt(notes[i + 1].start_tick - notes[i].start_tick));
            const timing_error = @abs(actual_interval - expected_spacing);
            sum += timing_error;
            sum_squares += timing_error * timing_error;
        }
        
        const mean = sum / @as(f64, @floatFromInt(error_count));
        return (sum_squares / @as(f64, @floatFromInt(error_count))) - (mean * mean);
    }
    
    // Calculate individual errors using stack array
    for (0..error_count) |i| {
        const actual_interval = @as(f64, @floatFromInt(notes[i + 1].start_tick - notes[i].start_tick));
        const timing_error = @abs(actual_interval - expected_spacing);
        errors[i] = timing_error;
    }
    
    // Calculate mean
    var sum: f64 = 0.0;
    for (0..error_count) |i| {
        sum += errors[i];
    }
    const mean = sum / @as(f64, @floatFromInt(error_count));
    
    // Calculate variance
    var variance: f64 = 0.0;
    for (0..error_count) |i| {
        const diff = errors[i] - mean;
        variance += diff * diff;
    }
    
    return variance / @as(f64, @floatFromInt(error_count));
}
```

## Analysis Template (To be completed by simplification agent)

### Current Implementation Analysis
- **Purpose**: [Function's role in MIDI-to-MXL conversion]
- **Algorithm**: [How the function works]
- **Complexity**: [Time/space complexity, cyclomatic complexity]
- **Pipeline Role**: [Where this fits in the conversion pipeline]

### Simplification Opportunity
- **Proposed Change**: [Specific simplification identified]
- **Rationale**: [Why this simplification improves the code]
- **Complexity Reduction**: [Measurable improvement metrics]

### Evidence Package
- **Functional Proof**: [Demonstration of equivalence]
- **Performance Data**: [Before/after benchmarks if applicable]
- **Test Results**: [Validation of correctness]
- **Risk Assessment**: [Potential issues and mitigations]

### Recommendation
- **Confidence Level**: [0-100% with justification]
- **Implementation Priority**: [High/Medium/Low with reasoning]
- **Prerequisites**: [Dependencies or requirements]
